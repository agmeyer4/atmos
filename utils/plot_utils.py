import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import sys
sys.path.append('.')
from utils import regression_utils

#Declare functions
def plot_reg_on_ax(ax,reg_details,permil = False,labsize = 10,color = 'black'):
    '''Plots a regression line and its details on a matplotlib ax and legend
    
    Args:
    ax (axis from plt): a plt ax object on which to plot
    reg_details (dict) : details of the regression, generated by ac.lin_regress_2()
    
    Returns:
    ax : plt ax object with the regression line and legend plotted
    '''
    r2_val = reg_details['r_squared']
    if permil:
        slope_val = reg_details['slope']*1000 #get the "per mille" value by multiplying by 1000
        yint_val = reg_details['intercept']*1000
    else:
        slope_val = reg_details['slope']
        yint_val = reg_details['intercept']
                               
    annotation = f"R2={r2_val:.2}\n"
    annotation += f"slope={slope_val:.5}"
    if permil:
        annotation +=  "$^o/_{oo}$"
    annotation += '\n'
    annotation += f"y_int={yint_val:.3}"
    if permil:
        annotation +=  "$^o/_{oo}$"

    ax.plot(reg_details['x_regr_line'],reg_details['y_regr_line'],label = annotation,c = color)
    leg = ax.legend(handlelength=0, handletextpad=0, fancybox=True,fontsize = labsize)
    for item in leg.legend_handles:
        item.set_visible(False)
    return ax

# General Plotting Functions
def add_single_regression_to_ax(ax,df,x_name,y_name,regression_output,
                           x_err_name = None, y_err_name = None,
                           summary_keys = None,scatter_kwargs = {'s':5,'c':'k','zorder':5},regr_err = None):
    
    working_df = df.copy()
    x = working_df[x_name]
    y = working_df[y_name]
    x_err = working_df[x_err_name] if x_err_name else None
    y_err = working_df[y_err_name] if y_err_name else None

    x_line = np.array([x.min(), x.max()])
    y_line = regression_utils.linear_model([regression_output['slope'], regression_output['intercept']], x_line)

    ax.scatter(x,y,**scatter_kwargs)

    if x_err is not None and y_err is not None:
        ax.errorbar(x,y,xerr=x_err,yerr=y_err,fmt='o',markersize=0,c='grey',zorder = 4)

    ax.plot(x_line,y_line,c='r',zorder = 6)


    if summary_keys:
        summary_text = '\n'.join([f"{key}: {format(regression_output[key], f'.{3}e')}" for key in summary_keys])
        ax.plot([],[],c = 'red',label=summary_text)
    
    ax.legend()
    ax.set_xlabel(x_name)
    ax.set_ylabel(y_name)
    return ax